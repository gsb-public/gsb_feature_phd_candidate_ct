<?php
/**
 * @file
 * Code for the GSB Feature PhD Candidate CT feature.
 */

include_once 'gsb_feature_phd_candidate_ct.features.inc';

/**
 * Implements hook_form_alter().
 */
function gsb_feature_phd_candidate_ct_form_phd_candidate_node_form_alter(&$form, &$form_state, $form_id) {

  $language = $form['language']['#value'];

  // add a validation function
  $form['#validate'][] = 'gsb_feature_phd_candidate_ct_validate';

  // If the user doesn't have 'edit any' access for the phd candidate content
  // then this is just an authenticated user, and only access to edit their own
  // phd candidate profile.
  // If true, we will modify several function of the node edit form
  if (!user_access('edit any phd_candidate content')) {
    // remove these fields
    $form['revision_information']['#access'] = false;
    $form['field_job_display']['#access'] = false;
    $form['field_year']['#access'] = false;
    $form['field_academic_institution']['#access'] = false;
    // add a cancel button for the form
    $form['actions']['cancel'] = array(
      '#type' => 'submit',
      '#value' => t('Cancel'),
      '#submit' => array('gsb_feature_phd_candidate_ct_cancel_submit'),
    );
  }

  $form['actions']['preview_changes']['#access'] = false;

  $form['field_academic_institution']['#states'] = array(
    'visible' => array(
      ':input[name="field_job_display[' . $language . ']"]' => array(
        array('value' => 'placement_page'),
      ),
    ),
  );

  $form['field_year']['#states'] = array(
    'visible' => array(
      ':input[name="field_job_display[' . $language . ']"]' => array(
        array('value' => 'placement_page'),
      ),
    ),
  );

  if (!empty($form['field_faculty_advisors'][$language])) {
    foreach ($form['field_faculty_advisors'][$language] as $index => $data) {
      if (is_integer($index)) {
        $form['field_faculty_advisors']['und'][$index]['field_person_fac_or_other']['und']['#options']['UseEntityReference'] = 'GSB faculty';
        $form['field_faculty_advisors']['und'][$index]['field_person_fac_or_other']['und']['#options']['Other'] = 'Other (not GSB Faculty)';
      }
    }
  }
}

/**
 * Implements hook_field_attach_form().
 */
function gsb_feature_phd_candidate_ct_field_attach_form($entity_type, $entity, &$form, &$form_state, $langcode) {
  // $langcode might be NULL.
  $langcode = $langcode ?: LANGUAGE_NONE;
  // If this is a field_faculty_advisors field collection, and the entity reference is set,
  // setup the states for visibility
  if ($entity_type == 'field_collection_item' && $entity->field_name == 'field_faculty_advisors') {
    $map = array(
      'UseEntityReference' => array(
        'field_person_fac_single_ref',
      ),
      'Other' => array(
        'field_faculty_advisor_other',
      ),
    );

    // Build up the location of the field in the form.
    $parents = $form['#parents'];
    $parents[] = 'field_person_fac_or_other';
    $parents[] = $langcode;
    $first = array_shift($parents);
    $parents = $first . '[' . implode('][', $parents) . ']';

    // Loop through each possible value for the field_person_fac_or_other field,
    // controlling the visibility of the dependent fields.
    foreach ($map as $value => $fields) {
      foreach ($fields as $field) {
        $form[$field]['#states'] = array(
          'visible' => array(
            ':input[name="' . $parents . '"]' => array(
              array('value' => $value),
            ),
          ),
        );
      }
    }
    // remove "n/a" as an option for the fac_or_other
    unset($form['field_person_fac_or_other'][$langcode]['#options']['_none']);
  }
}

function gsb_feature_phd_candidate_ct_validate($form, &$form_state) {
  // always force the content to be published
  // if the user is someone that doesn't have the 'edit any' permission
  // this should be any phd student, who would only have the 'edit own' permission
  if (!user_access('edit any phd_candidate content')) {
    $form_state['values']['workbench_moderation_state_new'] = 'published';
  }

  // check if user set as the author exists
  // if not, then we will create the user
  $author_name = $form_state['values']['name'];
  if (!$author_user = user_load_by_name($author_name)) {
    //set up the user fields
    $fields = array(
      'name' => $author_name,
      'mail' => $author_name . '@stanford.edu',
      'pass' => user_password(),
      'status' => 1,
      'init' => 'gsb_feature_phd_candidate_ct',
      'roles' => array(
        DRUPAL_AUTHENTICATED_RID => 'authenticated user',
      ),
    );
    user_save(drupal_anonymous_user(), $fields);
  } 
}

/**
 * Redirect the submitted form, if the user has click on the cancel button.
 */
function gsb_feature_phd_candidate_ct_cancel_submit($form, &$form_state) {
  $form_state['redirect'] = $form_state['node']->path['alias'];
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function gsb_feature_phd_candidate_ct_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  if (($node = menu_get_object()) && $node->type == 'phd_candidate' && !user_access('edit any phd_candidate content')) {
    // The user is an authenticated user with access to edit their own 
    // phd candidate profile content.
    // Remove the 'View published' tab, and change the wording for the
    // 'New draft' tab.
    foreach($data['tabs'][0]['output'] as $key => $value) {
      $title = $data['tabs'][0]['output'][$key]['#link']['title'];
      if ($title == 'View published') {
        unset($data['tabs'][0]['output'][$key]);
      } 
      if ($title == 'New draft') {
        $data['tabs'][0]['output'][$key]['#link']['title'] = 'Edit your Profile';
      }         
    } 
  }  
}  

/**
 * Implements hook_field_extra_fields().
 */
function gsb_feature_phd_candidate_ct_field_extra_fields() {
  $extra['node']['phd_candidate']['display']['full_name'] = array(
    'label' => t('Full Name'),
    'description' => t('Full Name H1 wrapper'),
    'weight' => 1,
  );
  return $extra;
}

/**
 * Implements hook_entity_view().
 */
function gsb_feature_phd_candidate_ct_entity_view($entity, $type, $view_mode, $langcode) {
  if ($type != "node") {
    return;
  }

  if ($entity->type != "phd_candidate") {
    return;
  }

  $fields = field_extra_fields_get_display('node', $entity->type, $view_mode);
  if (empty($fields['full_name']['visible'])) {
    return;
  }

  // create the full name mark up
  $wrapper = entity_metadata_wrapper($type, $entity);
  $markup = '<h1 class="group-full-name">' . $wrapper->field_salutation->value() . ' ' . $wrapper->field_first_name->value() .
  ' ' . $wrapper->field_middle_name->value() .' ' . $wrapper->field_last_name->value() .
  ' ' . $wrapper->field_suffix_name->value() .'</h1>';
  $container['full_name'] = array('#markup' => $markup);

  $entity->content['full_name'] = $container;
}
